
/*
.L PU_reWeighting.cc+
PU_2016::MC_pileup_weight(int NumTrueInteraction, string mc, string data_scale)
Possible string mc and string data_scale list below:
Data_pileup_normalized|Data_pileup_normalized_UP|MC_pileup|Data_pileup_normalized_DOWN|
*/

#include <map>
#include <iostream>
namespace PU_2016{

double Data_pileup_normalized[100]={
6.540081e-06,
2.293830e-05,
6.322230e-05,
8.557956e-05,
1.225922e-04,
1.642137e-04,
1.917378e-04,
3.530716e-04,
9.657346e-04,
2.155439e-03,
4.846123e-03,
9.861992e-03,
1.650833e-02,
2.400577e-02,
3.216605e-02,
4.078176e-02,
4.818444e-02,
5.323949e-02,
5.612194e-02,
5.755730e-02,
5.841195e-02,
5.885869e-02,
5.830784e-02,
5.649103e-02,
5.375870e-02,
5.044448e-02,
4.667220e-02,
4.257466e-02,
3.832867e-02,
3.405739e-02,
2.982022e-02,
2.567054e-02,
2.169219e-02,
1.798593e-02,
1.463777e-02,
1.169798e-02,
9.177741e-03,
7.058461e-03,
5.306387e-03,
3.884409e-03,
2.757150e-03,
1.890125e-03,
1.247234e-03,
7.900635e-04,
4.794562e-04,
2.783304e-04,
1.544054e-04,
8.181452e-05,
4.141013e-05,
2.004350e-05,
9.306912e-06,
4.177853e-06,
1.846057e-06,
8.350398e-07,
4.149800e-07,
2.458288e-07,
1.779142e-07,
1.488463e-07,
1.339243e-07,
1.238390e-07,
1.152598e-07,
1.070791e-07,
9.898633e-08,
9.094665e-08,
8.301447e-08,
7.526764e-08,
6.778369e-08,
6.063117e-08,
5.386637e-08,
4.753247e-08,
4.165954e-08,
3.626528e-08,
3.135602e-08,
2.692805e-08,
2.296910e-08,
1.945982e-08,
1.637532e-08,
1.368666e-08,
1.136220e-08,
9.368810e-09,
7.672979e-09,
6.241675e-09,
5.043080e-09,
4.047139e-09,
3.225951e-09,
2.554023e-09,
2.008394e-09,
1.568663e-09,
1.216935e-09,
9.376944e-10,
7.176479e-10,
5.455282e-10,
4.118874e-10,
3.088837e-10,
2.300733e-10,
1.702127e-10,
1.250754e-10,
9.128626e-11,
6.617478e-11,
4.764669e-11
};
double Data_pileup_normalized_UP[100]={
6.372633e-06,
1.806129e-05,
5.981099e-05,
7.520136e-05,
1.115101e-04,
1.478906e-04,
1.748963e-04,
2.476305e-04,
6.513476e-04,
1.478982e-03,
3.177303e-03,
6.738625e-03,
1.214302e-02,
1.862634e-02,
2.568572e-02,
3.338028e-02,
4.112769e-02,
4.739325e-02,
5.156120e-02,
5.391768e-02,
5.512216e-02,
5.588095e-02,
5.627440e-02,
5.578621e-02,
5.418139e-02,
5.174718e-02,
4.878424e-02,
4.540722e-02,
4.171525e-02,
3.785646e-02,
3.395172e-02,
3.006273e-02,
2.622941e-02,
2.251083e-02,
1.898829e-02,
1.574310e-02,
1.283490e-02,
1.029151e-02,
8.111582e-03,
6.273894e-03,
4.748527e-03,
3.504647e-03,
2.513016e-03,
1.744779e-03,
1.169564e-03,
7.551623e-04,
4.688377e-04,
2.795121e-04,
1.598758e-04,
8.769045e-05,
4.612145e-05,
2.327862e-05,
1.129962e-05,
5.302654e-06,
2.434522e-06,
1.122203e-06,
5.460159e-07,
3.016307e-07,
1.999011e-07,
1.567411e-07,
1.365418e-07,
1.249023e-07,
1.162547e-07,
1.085527e-07,
1.011020e-07,
9.371125e-08,
8.636949e-08,
7.912633e-08,
7.204734e-08,
6.519734e-08,
5.863394e-08,
5.240503e-08,
4.654803e-08,
4.108984e-08,
3.604733e-08,
3.142811e-08,
2.723144e-08,
2.344936e-08,
2.006781e-08,
1.706782e-08,
1.442666e-08,
1.211890e-08,
1.011745e-08,
8.394391e-09,
6.921780e-09,
5.672271e-09,
4.619625e-09,
3.739099e-09,
3.007721e-09,
2.404465e-09,
1.910335e-09,
1.508379e-09,
1.183644e-09,
9.230839e-10,
7.154356e-10,
5.510726e-10,
4.218478e-10,
3.209306e-10,
2.426468e-10,
1.823249e-10
};
double MC_pileup[100]={
1.786530e-05,
2.566020e-05,
5.278570e-05,
8.889541e-05,
1.093620e-04,
1.409730e-04,
2.409980e-04,
7.120901e-04,
1.301210e-03,
2.452550e-03,
5.025890e-03,
9.195341e-03,
1.466970e-02,
2.041260e-02,
2.675860e-02,
3.376970e-02,
4.014780e-02,
4.501590e-02,
4.905770e-02,
5.248550e-02,
5.481590e-02,
5.599370e-02,
5.544680e-02,
5.376870e-02,
5.120550e-02,
4.767130e-02,
4.353120e-02,
3.931070e-02,
3.498120e-02,
3.074130e-02,
2.724250e-02,
2.371150e-02,
2.083290e-02,
1.824590e-02,
1.607120e-02,
1.424980e-02,
1.280400e-02,
1.157100e-02,
1.054700e-02,
9.594891e-03,
8.917181e-03,
8.292921e-03,
7.619501e-03,
6.980601e-03,
6.202501e-03,
5.465810e-03,
4.841270e-03,
4.071680e-03,
3.376810e-03,
2.698930e-03,
2.124730e-03,
1.602080e-03,
1.178840e-03,
8.596621e-04,
5.690851e-04,
3.654310e-04,
2.435650e-04,
1.568800e-04,
9.881281e-05,
6.537831e-05,
3.739240e-05,
2.613820e-05,
2.030700e-05,
1.730320e-05,
1.435000e-05,
1.364860e-05,
1.355550e-05,
1.374910e-05,
1.342550e-05,
1.339870e-05,
1.340610e-05,
1.342110e-05,
1.341770e-05,
1.329590e-05,
1.332870e-05,
0.000000e+00,
0.000000e+00,
0.000000e+00,
0.000000e+00,
0.000000e+00,
0.000000e+00,
0.000000e+00,
0.000000e+00,
0.000000e+00,
0.000000e+00,
0.000000e+00,
0.000000e+00,
0.000000e+00,
0.000000e+00,
0.000000e+00,
0.000000e+00,
0.000000e+00,
0.000000e+00,
0.000000e+00,
0.000000e+00,
0.000000e+00,
0.000000e+00,
0.000000e+00,
0.000000e+00,
0.000000e+00
};
double Data_pileup_normalized_DOWN[100]={
6.775932e-06,
2.928321e-05,
6.650383e-05,
9.768821e-05,
1.367103e-04,
1.805662e-04,
2.217551e-04,
5.466820e-04,
1.421693e-03,
3.280141e-03,
7.469858e-03,
1.405330e-02,
2.197249e-02,
3.063839e-02,
4.006578e-02,
4.875395e-02,
5.491577e-02,
5.847331e-02,
6.021031e-02,
6.118202e-02,
6.169150e-02,
6.106616e-02,
5.899858e-02,
5.591707e-02,
5.219058e-02,
4.795881e-02,
4.339927e-02,
3.871628e-02,
3.403107e-02,
2.940558e-02,
2.491777e-02,
2.068176e-02,
1.681418e-02,
1.339708e-02,
1.046258e-02,
7.999603e-03,
5.971555e-03,
4.333868e-03,
3.043296e-03,
2.058186e-03,
1.335272e-03,
8.283753e-04,
4.902643e-04,
2.763367e-04,
1.481727e-04,
7.554281e-05,
3.662938e-05,
1.692000e-05,
7.480619e-06,
3.202773e-06,
1.365546e-06,
6.152801e-07,
3.216283e-07,
2.092040e-07,
1.648347e-07,
1.446329e-07,
1.324891e-07,
1.228059e-07,
1.137690e-07,
1.048684e-07,
9.602698e-08,
8.730291e-08,
7.878911e-08,
7.057911e-08,
6.275508e-08,
5.538365e-08,
4.851479e-08,
4.218202e-08,
3.640343e-08,
3.118315e-08,
2.651316e-08,
2.237524e-08,
1.874300e-08,
1.558392e-08,
1.286117e-08,
1.053541e-08,
8.566215e-09,
6.913434e-09,
5.538163e-09,
4.403570e-09,
3.475449e-09,
2.722601e-09,
2.117013e-09,
1.633916e-09,
1.251704e-09,
9.517870e-10,
7.183618e-10,
5.381605e-10,
4.001706e-10,
2.953540e-10,
2.163738e-10,
1.573367e-10,
1.135582e-10,
8.135232e-11,
5.784739e-11,
4.082815e-11,
2.860206e-11,
1.988823e-11,
1.372638e-11,
9.403214e-12
};

  using namespace std;
const std::map<string,double*>::value_type init_value[] ={
std::map<string,double*>::value_type( "Data_pileup_normalized", Data_pileup_normalized),
std::map<string,double*>::value_type( "Data_pileup_normalized_UP", Data_pileup_normalized_UP),
std::map<string,double*>::value_type( "MC_pileup", MC_pileup),
std::map<string,double*>::value_type( "Data_pileup_normalized_DOWN", Data_pileup_normalized_DOWN)
};
const static std::map<string,double*> map_pu(init_value, init_value+4);

double MC_pileup_weight(int NumTrueInteraction, string mc, string data_scale){
if (NumTrueInteraction < 0 || NumTrueInteraction > 120 ) return 1;
map<string,double*>::const_iterator iter_mc   = map_pu.find(mc);
map<string,double*>::const_iterator iter_data = map_pu.find(data_scale);
if(iter_mc != map_pu.end() && iter_data != map_pu.end()) {return iter_mc->second[NumTrueInteraction]!=0 ? double(iter_data->second[NumTrueInteraction]/iter_mc->second[NumTrueInteraction]) : 1 ;}
else {std::cout<<"no "<<mc<<" or no "<<data_scale<<std::endl;return  1;}
}
}

